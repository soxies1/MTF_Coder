#!/opt/bin/python3


import os
import sys
import logging

logging.basicConfig(filename='mtfcoding2.log',filemode='w', format='%(asctime)s: %(message)s', level=logging.DEBUG)



class encode:
	
	def __init__(self, in_filename):
		print("In encode_main")
		log("In encode_main", False)
		name = in_filename
		file_in = open(name, 'r')
		if file_in == None:
			reason = 'Nothing read in from file: ' + name
			log (reason, True)
		reason = 'Name of file read is ' +name
		log(reason, False)
		out = name.replace('txt','mtf', 1)
		out = "../testresults/" + out
		file_out = open(file=out , mode="wb")
		reason = 'Output file named ' + out + ' created'
		log(reason, False)
		words = []
		count = 1
		logcount = 1
		file_out.write(b'\xfa\xce\xfa\xdf')
		log("Wrote mtf magic number", False)
		for line in file_in:
			reason = "Encoding line " + str(logcount) + " of in file"
			log(reason, False)
			logcount = logcount + 1
			umm = line
			l = umm.split()
			for k in l:	 
				the = k
				if k not in words:
					foo = to_byte(count)
					file_out.write(foo)
					file_out.write(the.encode('latin1'))
					words.insert(0,the)
					count = count +1
				else:
					pos = words.index(the) + 1
					file_out.write(to_byte(pos))
					words.remove(k)
					words.insert(0, the)
			file_out.write('\n'.encode('latin1'));
		log('Completed file encoding', False)
		print("Output file name is: " +out)
		print ("File encoded successfully")
		log("File encoded successfully", False)
		file_in.close()
		file_out.close()

def to_byte(foo):
	out = bytearray()
	if foo < 121:
		foo = foo + 128
		out.append(foo)
		return out
	elif foo < 376:
		front = 249
		back = foo - 121
		out.append(front)
		out.append(back)
		return out
	elif foo < 65913:
		front = 250
		mid = ((foo-376)//256)
		end = ((foo-376)%256)
		out.append(front)
		out.append(mid)
		out.append(end)
		return out
	else:
		log("Too many unique words in file", True)




def log(reason, error):
	if error == True:
		logging.warning("Error reason: "+reason)
		assert False, "Error found, check mtfcoding.log for details"
	else:
		logging.info(reason)
	

class decode:

	def __init__(self, filename):
		print("In decode_main")
		log("In decode_main", False)
		name = filename
		file_in = open(name, 'rb')
		if file_in == None:
			log('Nothing read from input file', True)
		log('Input file read', False)
		out = name.replace('mtf','txt', 1)
		out = "../testresults/" + out
		file_out = open(out, 'w')
		print ("Output file name now equals = "+out)
		reason = 'Output file name is: ' +out
		log(reason, False)
		words = []
		count = 1
		wud = ""
		holds =[]
		j = 0

		logcount = 1
		check = file_in.read(4)
		if check == b'\xfa\xce\xfa\xdf' or check == b'\xfa\xce\xfa\xde':
			log("Checked input file contains correct mtf magic numbers", False)
		else:
			log ("The input file was not a not a mtf file, cannot decode", True)
		for line in file_in:
			reason = "Decoding line "+ str(logcount) + " of in file"
			log(reason, False)
			logcount = logcount+1
			umm = line
			i = bytearray(umm)
			lencount = 1
			holds = []
			j = 0
			k = 0
			meow = len(i)
			while i[j] != None:
				tots = len(i) - 1
				val = ord(chr(i[j]))
				if val > 128:
					if val  == 249:
						holds.append(val)
						holds.append(ord(chr(i[j+1])))
						j = j + 2
						num = to_int(hold)
						holds = []
						
					elif val == 250:
						hold.append(val)
						holds.append(ord(chr(i[j+1])))
						holds.append(ord(chr(i[j+2])))
						j = j+3
						num = to_int(holds)
						holds = []
					else:
						num = val - 128
					if wud != "":
						words.insert(0,wud)
						if lencount == tots+1:
							file_out.write(wud)
						else:
							file_out.write(wud + " ")
						wud = ""
						count = count + 1
					pos = num
					if pos < count:	
						temp = words[pos-1]
						words.remove(words[pos-1])
						if lencount == tots:
							file_out.write(temp)
						else:
							file_out.write(temp + " ")
						words.insert(0, temp)
				elif val < 128 and val != 10:
					wud += str(chr(j))
					j = j+1
				else:
					if wud != "":
						words.insert(0,wud)
						file_out.write(wud)
						count = count + 1
						wud = ""
					file_out.write('\n')
					j = j +1
				lencount = lencount + 1
		print ("File decoded successfully")
		log("File decoded successfully", False)
		file_in.close()
		file_out.close()


def to_int(fun):
	if len(fun) == 2:
		return fun[1] + 121
	if len(fun) == 3:
		return (((fun[1]*256)+376) + ((fun[2]+376)%256))
		
		


command = os.path.basename(__file__)
if __name__ == "__main__" and command == "mtfencode.py":
	if len(sys.argv) < 2:
		log("No file arguments passed in", True)
	encode_main()
elif __name__ == "__main__" and command == "mtfdecode.py":
	if len(sys.argv) < 2:
		log("No File arguments passed in", True)
	decode_main()
